	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
		quickSort(input, 0, input.length-1);
	}
	public static void quickSort(int[] input,int si,int ei){
		if(si>ei){
			return;
		}
		int pivotPos=partition(input,si,ei);
		quickSort(input, si , pivotPos-1);//left elements that are smaller than the pivot element
		quickSort(input, pivotPos+1, ei);//right elements that are greater than the pivot element
	}
	private static int partition(int[] input,int si, int ei){
		int pivot=input[si];//the first element of array is considered initially as the pivot
		
		int count=0;
		//we will execute a loop from si till ei because for us that is the range that has to be sorted
		for(int i=si+1;i<=ei;i++){
			if(input[i]<=pivot){//we are checking for if i-th element is smaller than increase counter
				count++;
			}
		}
		int pivotPos=si+count;//we got the position of the pivot element from starting index
		int actualPosition=input[si];//we took a temporary variable and swapped the element at pivot position with the starting index
		input[si]=input[pivotPos];
		input[pivotPos]= actualPosition;

		//now check for the elements towards left and right of pivot and sort them
		int i=si , j=ei;
		while(i<pivotPos && j>pivotPos){
			if(input[i]<=input[pivotPos])//if element at i-th index is smaller than pivot element than it is fine move forward 
			i++;
			else if(input[j]>input[pivotPos])// if element at j-th index is bigger than pivot element than it is
												// fine move forward(backward)
			j--;
			//if not then swap the elements to its correct position
			else{
				int temp=input[i];
				input[i]=input[j];
				input[j]=temp;
				i++;
				j--;
			}
		}
		return pivotPos;
	}
}