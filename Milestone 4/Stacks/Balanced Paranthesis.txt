import java.util.Stack;
public class Solution {

    public static boolean isBalanced(String input) {
        //Your code goes here
     	Stack<Character> stack = new Stack<Character>();
		//boolean isBalanaced = false;

		for(int i=0; i < input.length(); i++){
			//String str = ""+input.charAt(i);		//store characters as String
			char c = input.charAt(i);
			//if opening bracket then push into stack
			// if(str.equals("(")  || str.equals("{")){
			// 	stack.push(str);
			// }
			if(c == '(' || c == '{'){
			 	stack.push(c);
			}
			else if(c == ')') {
                if(stack.isEmpty() || stack.pop() != '(') {
                    return false;
                }
            }
            else if(c == '}') {
                if(stack.isEmpty() || stack.pop() != '{') {
                    return false;
                }
            }
			//if closing bracket, pop bracket and compare if its a pair
			// else if(str.equals(")") || str.equals("}")){
			// 	//if stack becomes empty in between then also its not balanced
			// 	if(stack.isEmpty()){
			// 		return false;
			// 	}
			// 	String opening = stack.peek();
			// 	if(str.equals(")") && opening.equals("(")){
			// 		stack.pop();
			// 	}
			// 	if(str.equals("}") && opening.equals("{")){
			// 		stack.pop();
			// 	}
			// }			
		}
		//if stack is empty at end, then its balanced
		// if(input.length() > 0 && stack.isEmpty()){
		// 	isBalanaced = true;
		// }

		return stack.isEmpty();
    }
}